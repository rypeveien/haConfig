input_number:
  vvkjeller_hours: 
    name: Hours needed to get vvkjeller fully heated in 24 hours
    min: 0
    max: 5
    step: 0.1
    unit_of_measurement: "Hours"
    mode: box


counter: 
  vvtank_usage:
    name: "Minutes of hot water usage from main tank"
  vvkjeller_usage:
    name: "minutes of hot water usage from aux tank"

sensor:
  - platform: integration
    name: vv_tank_energy
    source: sensor.vv_tank_power
    method: left
    round: 2
    unit_prefix: k
    unit_time: h


template:
  - sensor: 
    - name: vvtank_soc
      unit_of_measurement: "kWh"
      state: >
        {% set full = 300 * 4.18 * (75 - 5)/3600 %}
        {% set cycle = states('sensor.vvtank_cycle_1')|float %}
        {% set counter = states('counter.vvtank_usage')|int %}
        {% set last = as_datetime(state_attr('sensor.vvtank_cycle_1', 'last_reset')) %}
        {% set diff = now().timestamp() - last.timestamp() %}
        {{ (full - diff / 3600 * 0.16)|round(1) + cycle - counter * 0.1 }}
    - name: vvkjeller_soc
      unit_of_measurement: "kWh"
      state: >
        {% set full = 120 * 4.18 * (75 - 5)/3600 %}
        {% set cycle = states('sensor.vvkjeller_cycle_1')|float %}
        {% set counter = states('counter.vvkjeller_usage')|int %}
        {% set last = as_datetime(state_attr('sensor.vvkjeller_cycle_1', 'last_reset')) %}
        {% set diff = now().timestamp() - last.timestamp() %}
        {{ (full - diff / 3600 * 0.15)|round(1) + cycle - counter * 0.1 }}
    - name: hours24_vvkjeller
      unit_of_measurement: "Hours"
      state: >
        {% set hours = states('input_number.vvkjeller_hours')|float %}
        {% if states('binary_sensor.vvkjeller_on') == 'on' %}
        {% set now = (now().timestamp() - states.binary_sensor.vvkjeller_on.last_updated.timestamp())/3600 %}
        {% set hours = (hours - now)|round(1) if hours > now else 0.1 %}
        {% endif %}
        {{ hours|round(2) }}
    - name: vvtank_last_on
      state: "{{ (state_attr('sensor.vvtank_cycle_1', 'last_reset')|as_datetime|as_local|string)[:16] }}"
    - name: vvkjeller_last_on
      state: "{{ (state_attr('sensor.vvkjeller_cycle_1', 'last_reset')|as_datetime|as_local|string)[:16] }}"
  - binary_sensor:
    - name: vvtank_on
      state: "{{ states('sensor.vv_tank_power')|float(default=0) > 0 }}"
    - name: vvkjeller_on
      state: "{{ states('sensor.stikk_vv_kjeller_power')|float(default=0) > 0 }}"
    - name: vvtank_usage_delay
      state: "{{ states('binary_sensor.vvtank_inn_usage') }}"
      delay_on: 
        minutes: 1
    - name: vvaux_usage_delay
      state: "{{ states('binary_sensor.vvaux_usage') }}"
      delay_on: 
        minutes: 1
    - name: under_limit_if_vvtank_on
      state: >
        {% set last = states('binary_sensor.under_limit_if_vvtank_on') %}
        {% set last = 'off' if last in ['unavailable', 'unknown'] else last %}
        {% set limit = states('sensor.rest_of_month_energy_limit')|int - 100 %}
        {% set used =  states('sensor.energiforbruk_time')|float * 1000 %}
        {% set rest =  states('sensor.amshan_power_import')|int * (60 - now().minute) / 60 %}
        {% set vvpower = states('sensor.vv_tank_power')|int %}
        {% set power_if_on = states('sensor.vvtank_power_when_on')|int(default=3000) %}
        {% set min = now().minute %}
        {% set vvdiff = (60 - min) * power_if_on / 60 if vvpower < 5
                        else 50 - (60 - min) * vvpower / 60  if min < 55
                        else 20 - (60 - min) * vvpower / 60  %}
        {{ last if min == 0 and vvpower > 5 else used + rest + vvdiff < limit }}
    - name: under_limit_if_vvkjeller_on
      state: >
        {% set last = states('binary_sensor.under_limit_if_vvkjeller_on') %}
        {% set last = 'off' if last in ['unavailable', 'unknown'] else last %}
        {% set limit = states('sensor.rest_of_month_energy_limit')|int - 100 %}
        {% set used =  states('sensor.energiforbruk_time')|float * 1000 %}
        {% set rest =  states('sensor.amshan_power_import')|int * (60 - now().minute) / 60 %}
        {% set vvpower = states('sensor.stikk_vv_kjeller_power')|int %}
        {% set power_if_on = states('sensor.vvkjeller_power_when_on')|int(default=2000) %}
        {% set min = now().minute %}
        {% set vvdiff = (60 - min) * power_if_on / 60 if vvpower < 5
                        else 50 - (60 - min) * vvpower / 60  if min < 55
                        else 20 - (60 - min) * vvpower / 60  %}
        {{ last if min == 0 and vvpower > 5 else used + rest + vvdiff < limit }}
      
  - trigger:
      - platform: state
        entity_id: sensor.vv_tank_power
    sensor:
      - name: vvtank_power_when_on
        unit_of_measurement: "W"
        state: >
          {% set last = states('sensor.vvtank_power_when_on')|int(default=3000) %}
          {% set last = last if last > 2500 else 3000 %}
          {% set current = states('sensor.vv_tank_power')|int(default=3000) %}
          {{ last if current < 2500 else current }}
  - trigger: 
      - platform: state
        entity_id: sensor.vvtank_temp_inn
    binary_sensor:
      - name: vvtank_inn_usage
        state: >
          {% set last = states('binary_sensor.vvtank_inn_usage') %}
          {% set from = trigger.from_state.state %}
          {% set to = trigger.to_state.state %}
          {% if from in ['unavailable', 'unknown'] or to in ['unavailable', 'unknown'] %}
            {% set from = 0 %}
            {% set to = 0 %}
          {% else %}
            {% set from = from|float %}
            {% set to = to|float %}
          {% endif %}
          {{ "off" if to > from else 
             "on" if from > 3 + to else
             last }}
  - trigger: 
      - platform: state
        entity_id: sensor.vvaux_temp
    binary_sensor:
      - name: vvaux_usage
        state: >
          {% set last = states('binary_sensor.vvaux_usage') %}
          {% set from = trigger.from_state.state %}
          {% set to = trigger.to_state.state %}
          {% if from in ['unavailable', 'unknown'] or to in ['unavailable', 'unknown'] %}
            {% set from = 0 %}
            {% set to = 0 %}
          {% else %}
            {% set from = from|float %}
            {% set to = to|float %}
          {% endif %}
          {{ "off" if to > from else 
             "on" if from > 3 + to else
             last }}
  - trigger: 
      - platform: state
        entity_id: sensor.vvtank_temp_ut
    sensor: 
      - name: vvtank_ut_reference
        unit_of_measurement: "Â°C"
        device_class: temperature
        state: >
          {% set last = states('sensor.vvtank_ut_reference') %}
          {% set from = trigger.from_state.state %}
          {% set to = trigger.to_state.state %}
          {% set last = to if last in ['unavailable', 'unknown'] else last %}
          {{ last if (from in ['unavailable'] or to in ['unavailable']) else
             to if (to|float + 0.2) < from|float else
             last if to|float > (last|float + 1) else to }}
    binary_sensor: 
      - name: vvtank_usage
        state: >
          {% set last = states('binary_sensor.vvtank_usage') %}
          {% set from = trigger.from_state.state %}
          {% set to = trigger.to_state.state %}
          {{ last if (from in ['unavailable'] or to in ['unavailable']) else
             "off" if (to|float + 0.2) < from|float else
             "on" if to|float > (from|float + 5) else last }}
  - trigger:
      - platform: state
        entity_id: sensor.stikk_vv_kjeller_power
    sensor:
      - name: vvkjeller_power_when_on
        unit_of_measurement: "W"
        state: >
          {% set last = states('sensor.vvkjeller_power_when_on') %}
          {% set current = states('sensor.stikk_vv_kjeller_power')|int(default=0) %}
          {{ last if current < 1500 else current }}

utility_meter:
  vvtank_cycle:
    source: sensor.vv_tank_energy
    tariffs: 1
# vvtank emits 160 watts , that is 3.8 kWh during 24 hours of no use
  vvkjeller_cycle:
    source: sensor.stikk_vv_kjeller_energy
    tariffs: 1
# vvkjeller emits 150 watts, that is 3.6 kWh during 24 hours of no use

automation:
  - id: '1658529461779'
    alias: VV Tank on or off by hours
    trace:
      stored_traces: 15
    trigger: 
    - platform: state
      entity_id: 
        - sensor.main_heater_hours
    - platform: state
      entity_id: 
        - binary_sensor.under_limit_if_vvtank_on
    - platform: template
      value_template: >
        {% set hours = states('sensor.main_heater_hours')|from_json %}
        {{ hours|length > 0 and hours[0] == now().hour }}
    action:
      - if:
          - condition: template
            value_template: >-
              {% set hours = states('sensor.main_heater_hours')|from_json %}
              {% set hour = now().hour %}
              {{ hours|length == 0 or hours[0] == hour or (hours|length > 1 and hours[1] == hour) }}
        then:
          - if:
              - condition: device
                type: is_off
                device_id: ced3fc17b42719e3af505c552f41c16a
                entity_id: switch.vv_tank
                domain: switch
              - condition: state
                entity_id: binary_sensor.under_limit_if_vvtank_on
                state: 'on'
            then:
              - type: turn_on
                device_id: ced3fc17b42719e3af505c552f41c16a
                entity_id: switch.vv_tank
                domain: switch
        else:
          - if:
              - condition: device
                type: is_on
                device_id: ced3fc17b42719e3af505c552f41c16a
                entity_id: switch.vv_tank
                domain: switch
            then:
              - type: turn_off
                device_id: ced3fc17b42719e3af505c552f41c16a
                entity_id: switch.vv_tank
                domain: switch

  - id: '1658959948857'
    alias: VV Kjeller on or off by hours
    trace:
      stored_traces: 15
    trigger: 
    - platform: state
      entity_id: 
        - sensor.aux_heater_hours
    - platform: state
      entity_id: 
        - binary_sensor.under_limit_if_vvkjeller_on
    - platform: template
      value_template: >
        {% set hours = states('sensor.aux_heater_hours')|from_json %}
        {{ hours|length > 0 and hours[0] == now().hour }}
    action:
      - if:
          - condition: template
            value_template: >-
              {% set hours = states('sensor.aux_heater_hours')|from_json %}
              {% set hour = now().hour %}
              {{ hours|length == 0 or hours[0] == hour or (hours|length > 1 and hours[1] == hour) }}
        then:
          - if:
              - condition: device
                type: is_off
                device_id: 864126853760387fb9a41a020cd087f1
                entity_id: switch.stikk_vv_kjeller
                domain: switch
              - condition: state
                entity_id: binary_sensor.under_limit_if_vvkjeller_on
                state: 'on'
            then:
              - type: turn_on
                device_id: 864126853760387fb9a41a020cd087f1
                entity_id: switch.stikk_vv_kjeller
                domain: switch
        else:
          - if:
              - condition: device
                type: is_on
                device_id: 864126853760387fb9a41a020cd087f1
                entity_id: switch.stikk_vv_kjeller
                domain: switch
            then:
              - type: turn_off
                device_id: 864126853760387fb9a41a020cd087f1
                entity_id: switch.stikk_vv_kjeller
                domain: switch


  - id: '1658955764652'
    alias: VV Tank hours update
    mode: single
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.vvtank_on
        from: "on"
        to: "off"
    condition:
      - condition: device
        type: is_on
        device_id: ced3fc17b42719e3af505c552f41c16a
        entity_id: switch.vv_tank
        domain: switch
    action:
      - service: utility_meter.reset
        data: {}
        target:
          entity_id: select.vvtank_cycle
      - service: counter.reset
        data: {}
        target:
          entity_id: counter.vvtank_usage

  - id: '1652881309414'
    alias: vvtank_on update
    description: ''
    trigger:
    - platform: template
      value_template: >
        {{ states('binary_sensor.vvtank_on') == 'on' 
           and states('switch.vv_tank') == 'off'
          and now().timestamp() - states.switch.vv_tank.last_updated.timestamp() > 30 }}
    condition: []
    action:
    - type: turn_on
      device_id: ced3fc17b42719e3af505c552f41c16a
      entity_id: switch.vv_tank
      domain: switch
    - delay:
        hours: 0
        minutes: 1
        seconds: 0
        milliseconds: 0
    - type: turn_off
      device_id: ced3fc17b42719e3af505c552f41c16a
      entity_id: switch.vv_tank
      domain: switch
    - if:
        - condition: state
          entity_id: binary_sensor.vvtank_on
          state: "on"
      then:
        - service: notify.persistent_notification
          data:
            message: vvtank_on ser ut til Ã¥ henge
            title: 'vvtank debug '
    mode: single

  - id: '1658960346745'
    alias: VV Kjeller hours update
    description: ''
    trigger:
    - platform: state
      entity_id: sensor.aux_heater_hours
    - platform: template
      value_template: >
        {{ states('sensor.lowest_humidity_at_bathrom_downstairs_last_15_minutes') != 'unknown'
           and states('sensor.lumi_bad_nede_humidity')|int(default=50) > 
           states('sensor.lowest_humidity_at_bathrom_downstairs_last_15_minutes')|int(default=50) + 5 }}
      id: humidity_downstairs_high
    - platform: state
      entity_id: binary_sensor.vvkjeller_on
      from: 'on'
      to: 'off'
      id: vvkjeller_off
    - platform: template
      value_template: >
        {{ states('switch.stikk_vv_kjeller') == 'on' 
           and states('binary_sensor.vvkjeller_on') == 'off' 
           and now().timestamp() - states.switch.stikk_vv_kjeller.last_updated.timestamp() > 300 }}
      id: vvkjeller_not_starting
    condition: 
    - condition: template
      value_template: "{{ state_attr('automation.vv_kjeller_hours_update', 'current') == 0}}"
    action:
    - choose:
      - conditions:
        - condition: template
          value_template: >
            {{ states('binary_sensor.vvkjeller_on') == 'on' 
              and states('sensor.hours24_vvkjeller')|float > 1
              and as_local(states.binary_sensor.vvkjeller_on.last_updated).hour != now().hour }}
        sequence:
        - service: input_number.set_value
          data: 
            value: >
              {% set on = states.binary_sensor.vvkjeller_on.last_updated.timestamp() %}
              {% set hour = states.input_number.vvkjeller_hours.last_updated.timestamp() %}
              {% set last =  on if on > hour else hour %}
              {{ (states('input_number.vvkjeller_hours')|float - 
                (now().timestamp() - last)/3600)|round(1) }}
          target:
            entity_id: input_number.vvkjeller_hours
    - choose:
      - conditions:
        - condition: trigger
          id: humidity_downstairs_high
        sequence:
        - service: input_number.set_value
          data:
            value: "{{ (states('input_number.vvkjeller_hours')|float + 0.7)|round(2)  }}"
          target:
            entity_id: input_number.vvkjeller_hours
      - conditions:
        - or: 
            - condition: trigger
              id: vvkjeller_off
            - condition: trigger
              id: vvkjeller_not_starting
        sequence:
        - choose:
          - conditions:
            - condition: template
              value_template: "{{ states('switch.stikk_vv_kjeller') == 'on' }}"
            sequence:
            - service: utility_meter.reset
              target:
                entity_id: select.vvkjeller_cycle
            - service: counter.reset
              target:
                entity_id: counter.vvkjeller_usage
            - service: input_number.set_value
              data:
                value: 1.6
              target:
                entity_id: input_number.vvkjeller_hours
            - service: input_datetime.set_datetime
              data:
                timestamp: '{{ now().timestamp() }}'
              target:
                entity_id: input_datetime.vvkjeller_last_on
          default:
          - service: input_number.set_value
            data:
              value: >
                {% set trigger_from = trigger.from_state.last_updated.timestamp() %}
                {% set hour = states.input_number.vvkjeller_hours.last_updated.timestamp() %}
                {% set last = trigger_from if trigger_from > hour else hour %}
                {% set new = states('input_number.vvkjeller_hours')|float - (trigger.to_state.last_updated.timestamp() - last)/3600 %}
                {{ 0.6 if new < 0.6 and states('binary_sensor.vvkjeller_on') == 'on' else new }}
            target:
              entity_id: input_number.vvkjeller_hours
      default: []
    mode: single

  - id: '1666974171362'
    alias: 'Count minutes off water usage from vvtank'
    trigger:
      - platform: time_pattern
        minutes: "/1"
    condition:
      - condition: state
        entity_id: binary_sensor.vvtank_usage_delay
        state: "on"
    action:
      - service: counter.increment
        target: 
          entity_id: counter.vvtank_usage

  - id: '1666974171462'
    alias: 'Count minutes off water usage from vvkjeller'
    trigger:
      - platform: time_pattern
        minutes: "/1"
    condition:
      - condition: state
        entity_id: binary_sensor.vvaux_usage_delay
        state: "on"
    action:
      - service: counter.increment
        target: 
          entity_id: counter.vvkjeller_usage
